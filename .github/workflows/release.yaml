---
# Source: https://github.com/hendrikmaus/rust-workflows
#
# Release Workflow For Rust
#
# This workflow is based on a matrix build to provide pre-compiled binaries
# for multiple operating systems.
#
# Builds on Linux are cached, see https://blog.hendrikmaus.dev/github-actions-release-caching/
#
# The job to publish to crates.io requires a secret with a token
# called `CARGO_REGISTRY_TOKEN`
#
name: Release
on:
  push:
    tags:
      - 'v*'
    # for testing on a branch
    branches:
      - share-release-cache-with-non-linux-runners

env:
  # replace with your binary name as it appears in target/*/release
  PROJ_NAME: rust-workflows

  # used for storing release caches as containers
  CACHE_REGISTRY: ghcr.io
  CACHE_IMAGE: ${{ github.repository }}/release-cache

  ## Options for containerization

  # binary of which build target to copy into the container
  #   the step will download the artifact built by the `binaries` job
  #   it will try and download `$PROJ_NAME-$IMAGE_BINARY_TARGET`
  IMAGE_BINARY_TARGET: x86_64-unknown-linux-musl

  # container registry to use
  #   if not using ghcr.io, you'll need to adapt the step
  IMAGE_REGISTRY: ghcr.io

  # image name to use
  #   `$IMAGE_REGISTRY/$IMAGE_NAME:$TAG`
  #   where `$TAG` will be derived from `GITHUB_REF`
  #   e.g. `refs/tags/v1.0.0 -> v1.0.0`
  IMAGE_NAME: ${{ github.repository }}

  ## Misc. options

  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash

jobs:
  # The caching job looks for a container image with a release cache
  # and shares the contents with the subsequent jobs using artifacts.
  # This way, non-Linux runners can also leverage build caching.
  cache:
    name: Restore Cache
    runs-on: ubuntu-20.04
    outputs:
      cache_hit: ${{ steps.data.outputs.cache_hit }}
      cache_name: cache.tgz
    steps:
      - name: Checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

#      - uses: actions-rs/toolchain@568dc894a7f9e32ffd9bb7d7a6cebb784cdaa2b0
#        with:
#          toolchain: stable
#          override: true
#          profile: minimal
#          target: ${{ matrix.target }}

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.CACHE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # todo also one build below needs to actually create the cache
      - name: Restore cache
        id: restore
        uses: hendrikmaus/custom-cache-action/restore@master
        with:
          registry: ${{ env.CACHE_REGISTRY }}
          image: ${{ env.CACHE_IMAGE }}
          # todo need to define where the cache comes from
          tag: x86_64-unknown-linux-gnu

      # todo can windows runners extract a tarball? tgz file > they have gh installed and it can
      # Upload the raw tarball from the cache so all subsequent jobs can use it
      - name: Upload cache
        if: ${{ steps.restore.outputs.cache_hit == 'true' }}
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2
        with:
          name: cache.tgz
          path: ${{ steps.restore.outputs.tarball_path }}

      - name: Set output
        id: data
        run: |
          echo "::set-output name=cache_hit::${{ steps.restore.outputs.cache_hit }}"

  binaries:
    name: Binaries
    needs: cache
    strategy:
      fail-fast: false
      matrix:
        include:
          # Supported `cross` targets:
          #   https://github.com/rust-embedded/cross#supported-targets

          # Linux targets; cached
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest, cross: true }
          - { target: x86_64-unknown-linux-musl, os: ubuntu-latest, cross: true }
          - { target: aarch64-unknown-linux-musl, os: ubuntu-latest, cross: true }
          #- { target: i686-unknown-linux-musl, os: ubuntu-latest, cross: true }
          #- { target: arm-unknown-linux-musleabihf, os: ubuntu-latest, cross: true }

          # macOS targets; un-cached
          - { target: x86_64-apple-darwin, os: macOS-latest, cross: false }
          - { target: aarch64-apple-darwin, os: macOS-latest, cross: false }

          # Windows works, but is extremely slow and un-cached
          #- { target: aarch64-pc-windows-msvc, os: windows-latest, cross: false }
          - { target: x86_64-pc-windows-msvc, os: windows-latest, cross: false }
          #- { target: i686-pc-windows-msvc, os: windows-latest, cross: false }

          # FreeBSD; linking fails
          #- { target: x86_64-unknown-freebsd, os: ubuntu-latest, cross: false }

    continue-on-error: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - uses: actions-rs/toolchain@568dc894a7f9e32ffd9bb7d7a6cebb784cdaa2b0
        with:
          toolchain: stable
          override: true
          profile: minimal
          target: ${{ matrix.target }}

      - uses: actions/download-artifact@v2
        if: ${{ needs.cache.outputs.cache_hit == 'true' }}
        with:
          name: ${{ needs.cache.outputs.cache_name }}
          path: /tmp/cache

      - name: Display structure of downloaded files
        if: ${{ needs.cache.outputs.cache_hit == 'true' }}
        run: ls -R
        working-directory: /tmp/cache

# todo looks like gh can only access the artifacts after the fact
#      - name: Restore cache
#        if: ${{ needs.cache.outputs.cache_hit == 'true' }}
#        env:
#          CACHE_NAME: ${{ needs.cache.outputs.cache_name }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          tempdir=$(mktemp -d)
#          cd "${tempdir}"
#          # downloads and extracts the artifact
#          gh run download "${GITHUB_RUN_ID}" --name "${CACHE_NAME}" --repo "${GITHUB_REPOSITORY}"
#          ls -la
#          # let's see how the filesystem looks like afterwards
#          # we may need to move everything into place
#         cd -

#      - name: Log in to the Container registry
#        if: runner.os == 'Linux'
#        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
#        with:
#          registry: ${{ env.CACHE_REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Restore cache
#        if: runner.os == 'Linux'
#        uses: hendrikmaus/custom-cache-action/restore@master
#        with:
#          registry: ${{ env.CACHE_REGISTRY }}
#          image: ${{ env.CACHE_IMAGE }}
#          tag: ${{ matrix.target }}

      - name: Compile
        uses: actions-rs/cargo@4ff6ec2846f6e7217c1a9b0b503506665f134c4b
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.cross }}

      - name: Compress
        run: |
          cd target/${{ matrix.target }}/release
          case "${RUNNER_OS}" in
            Linux)
              tar czvf "${GITHUB_WORKSPACE}/${PROJ_NAME}-${{ matrix.target }}.tar.gz" "${PROJ_NAME}"
              ;;
            macOS)
              # gh docs say gtar is aliased to tar, but it failed
              gtar czvf "${GITHUB_WORKSPACE}/${PROJ_NAME}-${{ matrix.target }}.tar.gz" "${PROJ_NAME}"
              ;;
            Windows)
              7z a "${GITHUB_WORKSPACE}/${PROJ_NAME}-${{ matrix.target }}.zip" "${PROJ_NAME}.exe"
              ;;
            *)
              echo "[ERROR] unsupported OS: ${RUNNER_OS}"
              exit 1
          esac
          cd -

      - name: Upload Unix
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2
        with:
          name: ${{ env.PROJ_NAME }}-${{ matrix.target }}.tar.gz
          path: ${{ env.PROJ_NAME }}-${{ matrix.target }}.tar.gz

      - name: Upload Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2
        with:
          name: ${{ env.PROJ_NAME }}-${{ matrix.target }}.zip
          path: ${{ env.PROJ_NAME }}-${{ matrix.target }}.zip

# todo at least one linux job needs to save the cache
#      - name: Save cache
#        if: runner.os == 'Linux'
#        uses: hendrikmaus/custom-cache-action/save@master
#        with:
#          paths: "${{ github.workspace }}/target /home/runner/.cargo/registry/index /home/runner/.cargo/registry/cache"
#          registry: ${{ env.CACHE_REGISTRY }}
#          image: ${{ env.CACHE_IMAGE }}
#          tag: ${{ matrix.target }}

  release:
    name: GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: binaries
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          fetch-depth: 0

      - name: Binaries
        uses: actions/download-artifact@f023be2c48cc18debc3bacd34cb396e0295e2869

      - name: Checksums
        run: |
          for file in "${PROJ_NAME}"-*/"${PROJ_NAME}"-*; do
            openssl dgst -sha256 -r "${file}" \
              | awk '{print $1}' > "${file}.sha256"
          done

      - name: Publish
        uses: softprops/action-gh-release@4716bde57e0fcda6ce83002e2469b8a90e560573
        with:
          files: ${{ env.PROJ_NAME }}-*/${{ env.PROJ_NAME }}-*
          generate_release_notes: true

  containerize:
    name: Containerize
    needs: binaries
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Binaries
        uses: actions/download-artifact@f023be2c48cc18debc3bacd34cb396e0295e2869
        with:
          name: "${{ env.PROJ_NAME }}-${{ env.IMAGE_BINARY_TARGET }}.tar.gz"
          path: "target/${{ env.IMAGE_BINARY_TARGET }}/release/"

      - name: Build & Push
        env:
          DOCKER_BUILDKIT: 'true'
        run: |
          echo "::group::Extract binary"
          tar -C "target/${IMAGE_BINARY_TARGET}/release" \
            -xvf "target/${IMAGE_BINARY_TARGET}/release/${PROJ_NAME}-${IMAGE_BINARY_TARGET}.tar.gz"
          echo "::endgroup::"
          
          echo "::group::Determine image tag"
          tag=""
          if [[ "${GITHUB_REF}" == *"refs/tags"* ]]; then
            tag="${IMAGE_REGISTRY}/${IMAGE_NAME}:${GITHUB_REF/refs\/tags\//}"
          else
            tag="${IMAGE_REGISTRY}/${IMAGE_NAME}:${GITHUB_REF/refs\/heads\//}"
          fi
          
          echo "[INFO] tag is: '${tag}'"
          echo "::endgroup::"
          
          echo "::group::Container build"
          docker build \
            --tag "${tag}" \
            --build-arg bin="${PROJ_NAME}" \
            --build-arg bin_path="target/${IMAGE_BINARY_TARGET}/release/${PROJ_NAME}" \
            --file "${GITHUB_WORKSPACE}/Dockerfile" \
            "${GITHUB_WORKSPACE}"
          echo "::endgroup::"
          
          echo "::group::Container push"
          docker push "${tag}"
          echo "::endgroup::"

  cratesio:
    name: Publish to crates.io
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions-rs/toolchain@568dc894a7f9e32ffd9bb7d7a6cebb784cdaa2b0
        with:
          toolchain: stable
          override: true
          profile: minimal

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.CACHE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore cache
        uses: hendrikmaus/custom-cache-action/restore@master
        with:
          registry: ${{ env.CACHE_REGISTRY }}
          image: ${{ env.CACHE_IMAGE }}
          tag: cratesio

      - name: Publish to crates.io
        run: |
          cargo publish --token "${{ secrets.CARGO_REGISTRY_TOKEN }}"

      - name: Save cache
        uses: hendrikmaus/custom-cache-action/save@master
        with:
          paths: "${{ github.workspace }}/target /home/runner/.cargo/registry/index /home/runner/.cargo/registry/cache"
          registry: ${{ env.CACHE_REGISTRY }}
          image: ${{ env.CACHE_IMAGE }}
          tag: cratesio

  # Update a Homebrew tap
  #
  # Requires an initial version of the formula to be present in the tap for updating.
  homebrew:
    name: Bump Homebrew formula
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      - uses: mislav/bump-homebrew-formula-action@v1
        with:
          formula-name: ${{ env.PROJ_NAME }}
          formula-path: Formula/${{ env.PROJ_NAME }}.rb
          homebrew-tap: hendrikmaus/homebrew-tap
          base-branch: main
          # e.g. https://github.com/hendrikmaus/rust-workflows/archive/refs/tags/v0.3.1.tar.gz
          download-url: https://github.com/${{ github.repository }}/archive/${{ github.ref }}.tar.gz
          create-pullrequest: true
          commit-message: |
            {{formulaName}} {{version}}
            
            Created by https://github.com/mislav/bump-homebrew-formula-action, 
            from a workflow based on https://github.com/hendrikmaus/rust-workflows
        env:
          # Assuming your tap repo is public, create a PAT with public_repo scope
          #   see: https://github.com/mislav/bump-homebrew-formula-action
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_COMMIT_TOKEN }}
